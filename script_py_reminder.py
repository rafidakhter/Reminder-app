
import requests
import urllib.request
import json
from helper import *
'''
    stores_type is mock api for testing, in future this will be 
    converted into a google place search/ type API.#the api would be 
    modified so that the library can be brodened.

    Note:
    
        person_saved_item is a dictionary for all the items stored by the user,
        keys are the user names and the purchase items are saved as a list

        * figure out a way tosave it in json format
'''
personal_item = get_personal_items()

#organising the items according to locations

#list of different types of places within google library

list_of_type_of_store= get_type_of_store_list() 
username = 'rafida9@gmail.com'

def type_keyword_sorting(username,personal_item):

    ''' This function takes in the username and his personal item list to sort the users
    stored item into a list of key words and type
        the inputs are as following:
            type_keyword_sorting(username,personal_item)
            * username: is a string
            * personal_item: dictionary of saved item for the user
        output:
            a list [ary_keywords,ary_type]
    '''

    ary_keywords=[]
    ary_type=[]

    for x in range(0,len(personal_item[username])):

        if personal_item[username][x]['where'] in list_of_type_of_store:

            ary_type.append(personal_item[username][x]['where'])
        else:
            ary_keywords.append(personal_item[username][x]['where'])

    sorted_list=[ary_keywords,ary_type]

    return sorted_list

sorted=type_keyword_sorting(username,personal_item)


#the code below works making it a comment because do not want to continuously call on google API and be charged
'''def get_user_location():

    ''uses the google url post to get users location''

    url_requested= 'https://www.googleapis.com/geolocation/v1/geolocate?key=INSERT GOOGLE API KEY'
    response = requests.post( url_requested)
    r=response.text
    x=json.loads(r)
    lat=x['location']['lat']
    lng=x['location']['lng']
    accu=x['accuracy']
    user_location=[lat,lng,accu]

    return user_location'''

#userlocation = get_user_location()

userlocation = [4.413096, -75.651140, 1062]

#below is an example of search for searching walmart near me

'''

inputs were:

userlocation = [longitudonal, lattitude, 1062]
keyword = the place where the item is saved for the user
API_key = generated by google API

url = 'https://maps.googleapis.com/maps/api/place/nearbysearch/json?location='+userlocation[0] ,userlocation[1]+'&radius=500&keyword=' keyword '&key='+ api_key
'''


#the following is an example for searching for a place near the user:

#userlocation = [longitudonal, lattitude, 1062]
#keyword = sorted[0][0] = walmart
#API_key = ***** - collect from google API

# request_url ='https://maps.googleapis.com/maps/api/place/nearbysearch/json?
#               location={loc},{lat}&radius=500&keyword={key}&key={API}'.format(loc=userlocation[0],lat=userlocation[1],key=keyword,API=API_key)
#nearby_request = urllib.request.urlopen(request_url).read()
#nearby_response=json.loads(nearby_request)


#follwoing is the function for searching for for given keyword:

def search_nearby(ul,kw,condotion):
    '''
    Notes:
        inputs:
            ul =user location 
            kw= keywords for location of the product puschase
            condition = 'true'/'false'- for testing this will be removed for application

       if the user is whitin a certain range of the location 
        outputs:
        store_peramete=[a,b,c,d]
         note: a,b,c,d are the lng and lat values of the stores parameter
         
       *NOTE: for testing purpose we are taking in a conditon 
              if condition = true, the mock api will out put result
              else  condition = 'false',  the mock api will ouput 0 result
              
        '''
         
    # the following code will be used to GET response from google API
    '''userlocation = ul
    keyword = kw
    API_key = '*****************'

    request_url ='https://maps.googleapis.com/maps/api/place/nearbysearch/json?location={lng},{lat}&radius=500&keyword={key}&key={API}'.format(lng=userlocation[0],lat=userlocation[1],key=keyword,API=API_key)
    nearby_request = urllib.request.urlopen(request_url).read()
    nearby_response=json.loads(nearby_request)'''   
    #the following was the response when there IS A RESULTS in provided perameters
    nearby_response_true = get_nearby_response_true()

    #the following was the response when there IS NO RESULTS in provided perameters
    nearby_response_false={
            "html_attributions": [],
            "results": [],
            "status": "ZERO_RESULTS"
        }
    # Note: 
    #       nearby_response_true and nearby_response_false were tested and are actual response from url get reuqest
    if condotion=='true':
        nearby_response=nearby_response_true
    else:
        nearby_response=nearby_response_false
    if nearby_response['status']=="OK":
        store_perameter=[
        nearby_response_true['results'][0]["geometry"]['viewport']["northeast"]['lat'],
        nearby_response_true['results'][0]["geometry"]['viewport']["northeast"]['lng'],
        nearby_response_true['results'][0]["geometry"]['viewport']["southwest"]['lat'],
        nearby_response_true['results'][0]["geometry"]['viewport']["southwest"]['lng']
        ]
        return store_perameter

test_store_nearby_parameter=search_nearby(userlocation,'walmart','true')



#the perameters of the users location range will be to 0.0001169 degrees 
'''
NOTE:
    13/111200=0.0001169 where 13 is the highest uncetanity in a cell phone gps from in an urban environment
    'Smartphone GPS accuracy study in an urban environment'-Krista Merry, Pete Bettinger
'''
rng=0.0001169

user_location_range=[userlocation[0]-rng,userlocation[1]+rng,userlocation[0]+rng,userlocation[1]-rng]
print(user_location_range)
print(test_store_nearby_parameter)


def check_inside(ul,sl):

    check_ary=[]

    if ul[3]>sl[1] or ul[1]<sl[3]:
        check_ary.append(False)
    else:
        check_ary.append(True)
    
    if ul[2]>sl[0] or ul[0]<sl[2]:
        check_ary.append(False)
    else:
        check_ary.append(True)

    if False in check_ary:
        inside = False
    else:
        inside = True
    print
    return inside

user_inside_store = check_inside(user_location_range,test_store_nearby_parameter)
print (username)
if user_inside_store == True:
    
    print ('user inside the store')

else:

    print ('user not inside the store')
